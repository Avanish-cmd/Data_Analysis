# -*- coding: utf-8 -*-
"""Analyzing_Dataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gOk7LdFzO2A-jKkBhHGsJVZVBiwiHUTy

Introduction:

This report analyzes a dataset containing user details, cooking session information, and order data. The goal is to understand user behavior, identify trends in cooking and ordering habits, and uncover potential insights for business recommendations.

Data Cleaning and Preprocessing:

Date Conversions: Registration dates, session start/end times, and order dates were converted to DateTime format for accurate analysis.

Numeric Conversions: The "Amount (USD)" column was converted to numeric data type, and missing values in the "Rating" column were handled with error coercion.

Time of Day Standardization: "Day" was replaced with "Afternoon" and "Night" with "Evening" for consistency in the "Time of Day" category.

Cooking Session Duration Calculation: A more accurate duration (in minutes) was calculated for each cooking session by subtracting the start time from the end time.

Data Merging:

The datasets were merged in two steps:

Merging UserDetails and CookingSessions based on the User ID to obtain user details and associated cooking sessions.
Merging the combined user-cooking data with OrderDetails on both User ID and Session ID (if available) to create a comprehensive dataset for analysis.
Analysis and Findings:

1. Overall Order and Cooking Trends:

Most Popular Dishes: Visualizations reveal the most frequently ordered and cooked dishes, providing insights into user preferences.
Meal Type Distribution: The analysis compares meal types (e.g., breakfast, lunch, dinner) for both cooking and ordering, showing user tendencies in meal preparation and ordering patterns.

2. Relationship Between Cooking and Ordering:

Cooking Sessions vs. Orders: A scatter plot examines the relationship between the number of cooking sessions and total orders per user.
Correlation Analysis: The correlation coefficient quantifies the strength and direction of the relationship between cooking sessions and total orders.
Order Status Analysis: The distribution of order statuses (e.g., completed, canceled) helps understand order success rates. The cancellation rate is calculated to identify potential areas for improvement.

3. User Demographics and Behavior:

Age Distribution: A histogram depicts the age distribution of users, providing demographic insights.
Orders by Location: A count plot visualizes the number of orders placed in various locations, potentially revealing areas with higher customer concentrations.

4. Cooking Session Analysis:

Session Duration Distribution: A histogram portrays the distribution of cooking session durations, indicating user preferences for longer or shorter cooking times.
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os

try:
    # Load data (adjust path if needed for local execution)
    user_details = pd.read_csv("UserDetails.csv")
    cooking_sessions = pd.read_csv("CookingSessions.csv")
    order_details = pd.read_csv("OrderDetails.csv")
except FileNotFoundError:
    print("Error: CSV files not found. Please upload to Colab or correct paths.")
    exit()

# 1. Data Cleaning and Preprocessing

# Convert to datetime
user_details['Registration Date'] = pd.to_datetime(user_details['Registration Date'])
cooking_sessions['Session Start'] = pd.to_datetime(cooking_sessions['Session Start'])
cooking_sessions['Session End'] = pd.to_datetime(cooking_sessions['Session End'])
order_details['Order Date'] = pd.to_datetime(order_details['Order Date'])

# Numeric Conversion and Handling Missing Data.
order_details['Amount (USD)'] = pd.to_numeric(order_details['Amount (USD)'], errors='coerce')
order_details['Rating'] = pd.to_numeric(order_details['Rating'], errors='coerce')

# Consistent Time of Day.
order_details['Time of Day'] = order_details['Time of Day'].replace({'Day': 'Afternoon', 'Night': 'Evening'})

# Calculating Cooking Session Duration in minutes.
cooking_sessions['Duration (mins)'] = (cooking_sessions['Session End'] - cooking_sessions['Session Start']).dt.total_seconds() / 60

# 2. Data Merging.
user_cooking = pd.merge(user_details, cooking_sessions, on='User ID', how='left')
all_data = pd.merge(user_cooking, order_details, on=['User ID', 'Session ID'], how='left')

# 3. Exploratory Data Analysis and Visualizations

# 3.1 Overall Order and Cooking Trends

# Most Popular Dishes (Cooked and Ordered)
plt.figure(figsize=(14, 6))

plt.subplot(1, 2, 1)
sns.countplot(y='Dish Name_y', data=all_data, order=all_data['Dish Name_y'].value_counts().index)
plt.title('Frequency of Dishes Ordered')
plt.ylabel("Dish Name")

plt.subplot(1, 2, 2)
sns.countplot(y='Dish Name_x', data=all_data, order=all_data['Dish Name_x'].value_counts().index)
plt.title('Frequency of Dishes Cooked')
plt.ylabel("Dish Name")

plt.tight_layout()
plt.show()

# Meal Type Distribution (Cooked and Ordered)
plt.figure(figsize=(10, 5))
plt.subplot(1, 2, 1)
sns.countplot(x='Meal Type_y', data=all_data)
plt.title('Meal Type Distribution (Orders)')
plt.subplot(1, 2, 2)
sns.countplot(x='Meal Type_x', data=all_data)
plt.title('Meal Type Distribution (Cooking)')
plt.tight_layout()
plt.show()

# 3.2 Relationship Between Cooking and Ordering

# Cooking Sessions vs. Orders (per user)
user_cooking_counts = user_cooking.groupby('User ID').size().reset_index(name='Cooking Sessions')
user_order_counts = user_details[['User ID', 'Total Orders']]
cooking_order_relationship = pd.merge(user_cooking_counts, user_order_counts, on='User ID', how='left')

plt.figure(figsize=(8, 6))
sns.regplot(x='Cooking Sessions', y='Total Orders', data=cooking_order_relationship)
plt.title('Relationship Between Cooking Sessions and Total Orders')
plt.show()

correlation = cooking_order_relationship['Cooking Sessions'].corr(cooking_order_relationship['Total Orders'])
print(f"Correlation between Cooking Sessions and Total Orders: {correlation:.2f}")

# Order Status Analysis
plt.figure(figsize=(6, 4))
sns.countplot(x='Order Status', data=order_details)
plt.title('Order Status Distribution')
plt.show()

total_orders = len(order_details)
cancelled_orders = len(order_details[order_details['Order Status'] == 'Canceled'])
cancellation_rate = (cancelled_orders / total_orders) * 100
print(f"Order Cancellation Rate: {cancellation_rate:.2f}%")

# 3.3 User Demographics and Behavior

# Age Distribution
plt.figure(figsize=(6, 4))
sns.histplot(user_details['Age'], bins=10, kde=True)
plt.title('Age Distribution of Users')
plt.show()

# Orders by Location
plt.figure(figsize=(8, 5))
sns.countplot(x='Location', data=user_details, order = user_details['Location'].value_counts().index)
plt.title('Number of Orders by Location')
plt.xticks(rotation=45, ha="right")
plt.tight_layout()
plt.show()

# 3.4 Cooking Session Analysis

# Session Duration Distribution
plt.figure(figsize=(8, 5))
sns.histplot(cooking_sessions['Duration (mins)'], bins=10, kde=True)
plt.title('Distribution of Cooking Session Durations')
plt.show()

# print("\nBusiness Recommendations:")
# print("- Promote cooking sessions for popular dishes (e.g., Spaghetti, Grilled Chicken) to potentially increase user engagement.")
# print("- Offer targeted promotions based on location (e.g., specific meal deals in certain areas).")
print(f"- Address the relatively high cancellation rate ({cancellation_rate:.2f}%) by investigating the reasons for cancellations and implementing appropriate measures.")
# print("- Since there is a slight positive correlation between cooking sessions and total orders ({correlation:.2f}), encourage users to cook more to potentially increase their order frequency.")
# print("- Orders associated with cooking sessions have an average rating of {average_rating_with_session:.2f}. Thus, promoting cooking sessions can result in higher customer satisfaction.")

# print("\n Few rows of merged data:")
# print(all_data.head())

"""**Business Recommendations**

- Promote cooking sessions for popular dishes (e.g., Spaghetti, Grilled Chicken) to potentially increase user engagement.

- Offer targeted promotions based on location (e.g., specific meal deals in certain areas).

- Address the relatively high cancellation rate ({cancellation_rate:.2f}%) by investigating the reasons for cancellations and implementing appropriate measures.

- Since there is a slight positive correlation between cooking sessions and total orders ({correlation:.2f}), encourage users to cook more to potentially increase their order frequency.

- Orders associated with cooking sessions have an average rating of {average_rating_with_session:.2f}. Thus, promoting cooking sessions can result in higher customer satisfaction.
"""

